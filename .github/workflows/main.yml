name: Check and Publish

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  format:
    name: Format Check
    runs-on: ubuntu-latest

    if: > 
      false
      && github.ref == 'refs/heads/master'
      && github.repository_owner == 'SOAR-PKU'

    steps:
      - uses: actions/checkout@v2
      - name: Run clang-format style check for C/C++/Protobuf programs.
        uses: jidicula/clang-format-action@v4.8.0
        with:
          clang-format-version: "14"
          check-path: "src"
          fallback-style: "LLVM" # optional

  build:
    name: Build

    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          # `true` to checkout submodules or `recursive` to recursively checkout submodules.
          submodules: recursive

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

      - name: Build
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

      - name: Test
        working-directory: ${{github.workspace}}/build
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        #
        # We skip the test named "symbolize". See https://github.com/google/glog/issues/630 for detail.
        run: ctest -C ${{env.BUILD_TYPE}} --output-on-failure -E symbolize

  publish:
    name: Publish the lab
    runs-on: ubuntu-latest

    needs: [build]

    # Available context: https://docs.github.com/en/actions/learn-github-actions/contexts#github-context
    if: >
      github.event_name == 'push'
      && github.ref == 'refs/heads/master'
      && github.repository_owner == 'SOAR-PKU'

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Remove hidden source code
        run: /bin/bash publish/main.sh
      - name: Pushes to another repository
        id: push_directory
        uses: cpina/github-action-push-to-another-repository@ssh-deploy-key
        env:
          SSH_DEPLOY_KEY: ${{ secrets.SSH_DEPLOY_KEY }}
        with:
          source-directory: public
          destination-github-username: SOAR-PKU
          destination-repository-name: lab-netstack
          user-email: chengke@pku.edu.cn
          commit-message: Origin commit ORIGIN_COMMIT
